{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport axios from 'axios';\nexport const checkuserAuthentication = () => {\n  return dispatch => {\n    let token = localStorage.getItem('Token');\n    let expirationTime = localStorage.getItem('ExpirationTime');\n    let userId = localStorage.getItem('UserId');\n\n    if (token && expirationTime > new Date()) {\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n    }\n  };\n};\nexport const formSubmitHandler = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4';\n\n    if (!isSignUp) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4';\n    }\n\n    axios.post(url, authData).then(response => {\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(authEnd(null));\n      dispatch(authLogout(response.data.expiresIn));\n      setLocalStorage(response.data.idToken, response.data.expiresIn, response.data.localId);\n    }).catch(error => {\n      console.log(error);\n      dispatch(authEnd(error));\n    });\n  };\n};\n\nconst setLocalStorage = (token, expirationTime, userId) => {\n  localStorage.setItem('Token', token);\n  localStorage.setItem('ExpirationTime', new Date(new Date().getTime() + expirationTime * 1000));\n  localStorage.setItem('UserId', userId);\n};\n\nconst removeLocalStorage = () => {\n  localStorage.removeItem('Token');\n  localStorage.removeItem('ExpirationTime');\n  localStorage.removeItem('UserId');\n};\n\nconst logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nexport const logoutUser = () => {\n  removeLocalStorage();\n  return dispatch => {\n    dispatch(logout());\n  };\n};\n\nconst authLogout = expire => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expire * 1000);\n  };\n};\n\nconst authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nconst authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\n\nconst authEnd = error => {\n  return {\n    type: actionTypes.AUTH_END,\n    error: error\n  };\n};","map":{"version":3,"sources":["/Users/developer/Documents/Projects/Burger-builder/src/Store/actions/auth.js"],"names":["actionTypes","axios","checkuserAuthentication","dispatch","token","localStorage","getItem","expirationTime","userId","Date","authSuccess","response","data","idToken","localId","formSubmitHandler","email","password","isSignUp","authStart","authData","returnSecureToken","url","post","then","authEnd","authLogout","expiresIn","setLocalStorage","catch","error","console","log","setItem","getTime","removeLocalStorage","removeItem","logout","type","AUTH_LOGOUT","logoutUser","expire","setTimeout","AUTH_START","AUTH_SUCCESS","AUTH_END"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport axios from 'axios';\n\n\nexport const checkuserAuthentication = () => {\n\treturn dispatch => {\n\t\tlet token = localStorage.getItem('Token')\n\t\tlet expirationTime = localStorage.getItem('ExpirationTime')\n\t\tlet userId = localStorage.getItem('UserId')\n\n\t\tif(token && (expirationTime > new Date())) {\n\t\t\tdispatch(authSuccess(response.data.idToken, response.data.localId))\n\t\t}\n\t}\n}\n\nexport const formSubmitHandler = (email, password, isSignUp) => {\n\treturn dispatch => {\n\t\tdispatch(authStart())\n\t\tconst authData = {\n\t\t\temail: email,\n\t\t\tpassword: password,\n\t\t\treturnSecureToken: true\n\t\t}\n\t\tlet url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4'\n\t\tif(!isSignUp){\n\t\t\turl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4'\n\t\t}\n\t\taxios.post(url, authData)\n\t\t.then(response => {\n\t\t\tdispatch(authSuccess(response.data.idToken, response.data.localId))\n\t\t\tdispatch(authEnd(null))\n\t\t\tdispatch(authLogout(response.data.expiresIn))\n\t\t\tsetLocalStorage(response.data.idToken, response.data.expiresIn, response.data.localId)\n\t\t}).catch(error => {\n\t\t\tconsole.log(error)\n\t\t\tdispatch(authEnd(error))\n\t\t})\n\t}\n} \n\nconst setLocalStorage = (token, expirationTime, userId) => {\n\tlocalStorage.setItem('Token', token)\n\tlocalStorage.setItem('ExpirationTime', new Date(new Date().getTime() + expirationTime * 1000))\n\tlocalStorage.setItem('UserId', userId)\n}\n\n\nconst removeLocalStorage = () => {\n\tlocalStorage.removeItem('Token')\n\tlocalStorage.removeItem('ExpirationTime')\n\tlocalStorage.removeItem('UserId')\n}\n\nconst logout =  () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\nexport const logoutUser = () => {\n\tremoveLocalStorage()\n\treturn dispatch => {\n\t\tdispatch(logout())\n\t}\n}\n\nconst authLogout = (expire) => {\n\treturn dispatch => {\n\t\tsetTimeout(() => {\n\t\t\tdispatch(logout())\n\t\t}, expire * 1000 );\n\t}\n}\n\nconst authStart = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\nconst authSuccess = (token, userId) => {\n\treturn {\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\ttoken: token,\n\t\tuserId: userId\n\t}\n}\n\n\nconst authEnd = (error) => {\n\treturn {\n\t\ttype: actionTypes.AUTH_END,\n\t\terror: error\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}