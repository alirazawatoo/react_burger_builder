{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { uilityContent } from '../utility';\nconst intialState = {\n  loading: false,\n  token: null,\n  userId: null,\n  error: null\n};\n\nconst trySubmitOrder = (state, action) => {\n  return uilityContent(state, {\n    loading: true,\n    error: null\n  });\n};\n\nconst endSubmitOrder = (state, action) => {\n  return uilityContent(state, {\n    loading: false,\n    error: action.error\n  });\n};\n\nconst authSuccess = (state, action) => {\n  return uilityContent(state, {\n    loading: false,\n    token: action.token,\n    userId: action.userId\n  });\n};\n\nconst orderSubmitSuccess = (state, action) => {\n  let newOrder = { ...action.orders,\n    id: action.id\n  };\n  console.log(newOrder);\n  console.log(state.orders);\n  let orders = [...state.orders, newOrder];\n  console.log(orders);\n  return uilityContent(state, {\n    orders: orders,\n    loading: false,\n    purchased: true\n  });\n};\n\nconst orderSubmitFailure = (state, action) => {\n  return uilityContent(state, {\n    loading: false\n  });\n};\n\nconst orderPurchased = (state, action) => {\n  return uilityContent(state, {\n    purchased: false\n  });\n};\n\nconst authReducer = (state = intialState, action) => {\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n      return trySubmitOrder(state, action);\n\n    case actionTypes.AUTH_END:\n      return endSubmitOrder(state, action);\n\n    case actionTypes.AUTH_SUCCESS:\n      return endSubmitOrder(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;","map":{"version":3,"sources":["/Users/developer/Documents/Projects/Burger-builder/src/Store/reducer/auth.js"],"names":["actionTypes","uilityContent","intialState","loading","token","userId","error","trySubmitOrder","state","action","endSubmitOrder","authSuccess","orderSubmitSuccess","newOrder","orders","id","console","log","purchased","orderSubmitFailure","orderPurchased","authReducer","type","AUTH_START","AUTH_END","AUTH_SUCCESS"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,MAAMC,WAAW,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,MAAM,EAAE,IAHW;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAApB;;AAOA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,SAAOR,aAAa,CAAEO,KAAF,EAAS;AAAEL,IAAAA,OAAO,EAAE,IAAX;AAAiBG,IAAAA,KAAK,EAAE;AAAxB,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMI,cAAc,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACzC,SAAOR,aAAa,CAAEO,KAAF,EAAS;AAAEL,IAAAA,OAAO,EAAE,KAAX;AAAkBG,IAAAA,KAAK,EAAEG,MAAM,CAACH;AAAhC,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMK,WAAW,GAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACtC,SAAOR,aAAa,CAAEO,KAAF,EAAS;AAAEL,IAAAA,OAAO,EAAE,KAAX;AAAkBC,IAAAA,KAAK,EAAEK,MAAM,CAACL,KAAhC;AAAuCC,IAAAA,MAAM,EAAEI,MAAM,CAACJ;AAAtD,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMO,kBAAkB,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC7C,MAAII,QAAQ,GAAG,EAAE,GAAGJ,MAAM,CAACK,MAAZ;AAAoBC,IAAAA,EAAE,EAAEN,MAAM,CAACM;AAA/B,GAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACM,MAAlB;AACA,MAAIA,MAAM,GAAG,CAAC,GAAGN,KAAK,CAACM,MAAV,EAAkBD,QAAlB,CAAb;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,SAAOb,aAAa,CAAEO,KAAF,EAAS;AAAEM,IAAAA,MAAM,EAAEA,MAAV;AAAmBX,IAAAA,OAAO,EAAE,KAA5B;AAAoCe,IAAAA,SAAS,EAAE;AAA/C,GAAT,CAApB;AACA,CAPD;;AASA,MAAMC,kBAAkB,GAAG,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOR,aAAa,CAAEO,KAAF,EAAS;AAAEL,IAAAA,OAAO,EAAE;AAAX,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMiB,cAAc,GAAG,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AACzC,SAAOR,aAAa,CAAEO,KAAF,EAAS;AAAEU,IAAAA,SAAS,EAAE;AAAb,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMG,WAAW,GAAG,CAACb,KAAK,GAAGN,WAAT,EAAsBO,MAAtB,KAAiC;AACpD,UAAOA,MAAM,CAACa,IAAd;AACC,SAAKtB,WAAW,CAACuB,UAAjB;AACC,aAAOhB,cAAc,CAACC,KAAD,EAAQC,MAAR,CAArB;;AACD,SAAKT,WAAW,CAACwB,QAAjB;AACC,aAAOd,cAAc,CAACF,KAAD,EAAQC,MAAR,CAArB;;AACD,SAAKT,WAAW,CAACyB,YAAjB;AACC,aAAOf,cAAc,CAACF,KAAD,EAAQC,MAAR,CAArB;;AACD;AACC,aAAOD,KAAP;AARF;AAUA,CAXD;;AAaA,eAAea,WAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { uilityContent } from '../utility';\n\nconst intialState = {\n\tloading: false,\n\ttoken: null,\n\tuserId: null,\n\terror: null\n}\n\nconst trySubmitOrder = (state, action) => {\n\treturn uilityContent( state, { loading: true, error: null } )\n}\n\nconst endSubmitOrder = (state, action) => {\n\treturn uilityContent( state, { loading: false, error: action.error } )\n}\n\nconst authSuccess = (state, action) => {\n\treturn uilityContent( state, { loading: false, token: action.token, userId: action.userId } )\n}\n\nconst orderSubmitSuccess = (state, action) => {\n\tlet newOrder = { ...action.orders, id: action.id }\n\tconsole.log(newOrder);\n\tconsole.log(state.orders);\n\tlet orders = [...state.orders, newOrder]\n\tconsole.log(orders)\n\treturn uilityContent( state, { orders: orders , loading: false , purchased: true } )\n}\n\nconst orderSubmitFailure = (state, action) => {\n\treturn uilityContent( state, { loading: false } )\n}\n\nconst orderPurchased = (state, action) => {\n\treturn uilityContent( state, { purchased: false } )\n}\n\nconst authReducer = (state = intialState, action) => {\n\tswitch(action.type) {\n\t\tcase actionTypes.AUTH_START:\n\t\t\treturn trySubmitOrder(state, action)\n\t\tcase actionTypes.AUTH_END:\n\t\t\treturn endSubmitOrder(state, action)\n\t\tcase actionTypes.AUTH_SUCCESS:\n\t\t\treturn endSubmitOrder(state, action)\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}