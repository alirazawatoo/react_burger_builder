{"ast":null,"code":"import * as actionTypes from '../actions';\nimport { uilityContent } from '../utility';\nconst intialState = {\n  ingredients: {},\n  totalPrice: 4,\n  purchaseable: false,\n  ordering: false,\n  loading: false\n};\nconst INGREDIENTS_PRICES = {\n  salad: 0.5,\n  cheese: 0.5,\n  bacon: 0.2,\n  meat: 2\n};\n\nconst incrementIngredients = (state, action) => {\n  let ingredientCount = state.ingredients[action.ingredientName];\n  let ingredients = { ...state.ingredients\n  };\n  ingredients[action.ingredientName] = ingredientCount + 1;\n  let burgerPrice = INGREDIENTS_PRICES[action.ingredientName] + state.totalPrice;\n  return uilityContent(state, {\n    purchaseable: true,\n    totalPrice: burgerPrice,\n    ingredients: ingredients\n  });\n};\n\nconst decrementIngredients = (state, action) => {\n  let count = state.ingredients[action.ingredientName];\n  let totalIngredients = { ...state.ingredients\n  };\n  totalIngredients[action.ingredientName] = count - 1;\n  let price = state.totalPrice - INGREDIENTS_PRICES[action.ingredientName];\n  let ingredientsSum = 0;\n\n  for (let key in totalIngredients) {\n    ingredientsSum += totalIngredients[key];\n  }\n\n  return uilityContent(state, {\n    totalPrice: price,\n    ingredients: totalIngredients,\n    purchaseable: ingredientsSum > 0\n  });\n};\n\nconst reducer = (state = intialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_INGREDIENTS:\n      return uilityContent(state, {\n        ingredients: action.ingredients\n      });\n\n    case actionTypes.INC_INGREDIENTS:\n      return incrementIngredients(state, action);\n\n    case actionTypes.DEC_INGREDIENTS:\n      return decrementIngredients(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/developer/Documents/Projects/Burger-builder/src/Store/reducer/ingredients.js"],"names":["actionTypes","uilityContent","intialState","ingredients","totalPrice","purchaseable","ordering","loading","INGREDIENTS_PRICES","salad","cheese","bacon","meat","incrementIngredients","state","action","ingredientCount","ingredientName","burgerPrice","decrementIngredients","count","totalIngredients","price","ingredientsSum","key","reducer","type","SET_INGREDIENTS","INC_INGREDIENTS","DEC_INGREDIENTS"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,MAAMC,WAAW,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,UAAU,EAAE,CAFO;AAGnBC,EAAAA,YAAY,EAAE,KAHK;AAInBC,EAAAA,QAAQ,EAAE,KAJS;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAApB;AAQA,MAAMC,kBAAkB,GAAG;AAC1BC,EAAAA,KAAK,EAAE,GADmB;AAE1BC,EAAAA,MAAM,EAAE,GAFkB;AAG1BC,EAAAA,KAAK,EAAE,GAHmB;AAI1BC,EAAAA,IAAI,EAAE;AAJoB,CAA3B;;AAOA,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/C,MAAIC,eAAe,GAAGF,KAAK,CAACX,WAAN,CAAkBY,MAAM,CAACE,cAAzB,CAAtB;AACA,MAAId,WAAW,GAAG,EAAC,GAAGW,KAAK,CAACX;AAAV,GAAlB;AACAA,EAAAA,WAAW,CAACY,MAAM,CAACE,cAAR,CAAX,GAAqCD,eAAe,GAAG,CAAvD;AACA,MAAIE,WAAW,GAAGV,kBAAkB,CAACO,MAAM,CAACE,cAAR,CAAlB,GAA4CH,KAAK,CAACV,UAApE;AACA,SAAOH,aAAa,CAACa,KAAD,EAAQ;AAAET,IAAAA,YAAY,EAAE,IAAhB;AAAsBD,IAAAA,UAAU,EAAEc,WAAlC;AAA+Cf,IAAAA,WAAW,EAAEA;AAA5D,GAAR,CAApB;AACA,CAND;;AAQA,MAAMgB,oBAAoB,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC/C,MAAIK,KAAK,GAAGN,KAAK,CAACX,WAAN,CAAkBY,MAAM,CAACE,cAAzB,CAAZ;AACA,MAAII,gBAAgB,GAAG,EAAC,GAAGP,KAAK,CAACX;AAAV,GAAvB;AACAkB,EAAAA,gBAAgB,CAACN,MAAM,CAACE,cAAR,CAAhB,GAA0CG,KAAK,GAAG,CAAlD;AACA,MAAIE,KAAK,GAAGR,KAAK,CAACV,UAAN,GAAmBI,kBAAkB,CAACO,MAAM,CAACE,cAAR,CAAjD;AAEA,MAAIM,cAAc,GAAG,CAArB;;AACA,OAAK,IAAIC,GAAT,IAAgBH,gBAAhB,EAAkC;AACjCE,IAAAA,cAAc,IAAIF,gBAAgB,CAACG,GAAD,CAAlC;AACA;;AAED,SAAOvB,aAAa,CAACa,KAAD,EAAQ;AAAEV,IAAAA,UAAU,EAAEkB,KAAd;AAAqBnB,IAAAA,WAAW,EAAEkB,gBAAlC;AAAoDhB,IAAAA,YAAY,EAAEkB,cAAc,GAAG;AAAnF,GAAR,CAApB;AACA,CAZD;;AAcA,MAAME,OAAO,GAAG,CAACX,KAAK,GAAGZ,WAAT,EAAsBa,MAAtB,KAAiC;AAChD,UAAOA,MAAM,CAACW,IAAd;AACC,SAAM1B,WAAW,CAAC2B,eAAlB;AACC,aAAO1B,aAAa,CAACa,KAAD,EAAQ;AAAEX,QAAAA,WAAW,EAAEY,MAAM,CAACZ;AAAtB,OAAR,CAApB;;AACD,SAAMH,WAAW,CAAC4B,eAAlB;AACC,aAAOf,oBAAoB,CAACC,KAAD,EAAQC,MAAR,CAA3B;;AACD,SAAMf,WAAW,CAAC6B,eAAlB;AACC,aAAOV,oBAAoB,CAACL,KAAD,EAAQC,MAAR,CAA3B;;AACD;AACC,aAAOD,KAAP;AARF;AAUA,CAXD;;AAaA,eAAeW,OAAf","sourcesContent":["import * as actionTypes from '../actions'\nimport { uilityContent } from '../utility'\n\nconst intialState = {\n\tingredients: {},\n\ttotalPrice: 4,\n\tpurchaseable: false,\n\tordering: false,\n\tloading: false\n}\n\nconst INGREDIENTS_PRICES = {\n\tsalad: 0.5,\n\tcheese: 0.5,\n\tbacon: 0.2,\n\tmeat: 2\n}\n\nconst incrementIngredients = (state, action) => {\n\tlet ingredientCount = state.ingredients[action.ingredientName]\n\tlet ingredients = {...state.ingredients};\n\tingredients[action.ingredientName] = ingredientCount + 1;\n\tlet burgerPrice = INGREDIENTS_PRICES[action.ingredientName] + state.totalPrice;\n\treturn uilityContent(state, { purchaseable: true, totalPrice: burgerPrice, ingredients: ingredients })\n}\n\nconst decrementIngredients = (state, action) => {\n\tlet count = state.ingredients[action.ingredientName]\n\tlet totalIngredients = {...state.ingredients};\n\ttotalIngredients[action.ingredientName] = count - 1;\n\tlet price = state.totalPrice - INGREDIENTS_PRICES[action.ingredientName];\n\n\tlet ingredientsSum = 0;\n\tfor (let key in totalIngredients) {\n\t\tingredientsSum += totalIngredients[key]\n\t}\n\n\treturn uilityContent(state, { totalPrice: price, ingredients: totalIngredients, purchaseable: ingredientsSum > 0 })\n}\n\nconst reducer = (state = intialState, action) => {\n\tswitch(action.type) {\n\t\tcase (actionTypes.SET_INGREDIENTS):\n\t\t\treturn uilityContent(state, { ingredients: action.ingredients })\n\t\tcase (actionTypes.INC_INGREDIENTS):\n\t\t\treturn incrementIngredients(state, action)\n\t\tcase (actionTypes.DEC_INGREDIENTS):\n\t\t\treturn decrementIngredients(state, action)\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}