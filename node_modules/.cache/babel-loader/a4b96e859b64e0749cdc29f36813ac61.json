{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport axios from '../../axios-order';\nexport const checkoutOrder = data => {\n  return dispatch => {\n    dispatch(trySubmitOrder());\n    axios.post('/orders.json?auth=' + token, data).then(response => {\n      dispatch(submitOrderSuccess(data, response.data.name));\n    }).catch(error => {\n      dispatch(submitOrderFailure(error));\n    });\n  };\n};\nexport const fetchOrders = token => {\n  return dispatch => {\n    dispatch(trySubmitOrder());\n    axios.get('/orders.json?auth=' + token).then(response => {\n      let fetchOrders = [];\n\n      for (let key in response.data) {\n        fetchOrders.push({ ...response.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSubmit(fetchOrders));\n    }).catch(error => {\n      dispatch(submitOrderFailure(error));\n    });\n  };\n};\nexport const fetchOrdersSubmit = orders => {\n  return {\n    type: actionTypes.FETCH_ORDER,\n    orders: orders\n  };\n};\nexport const submitOrderFailure = error => {\n  return {\n    type: actionTypes.ORDER_SUBMIT_FAILURE,\n    error: error\n  };\n};\nexport const submitOrderSuccess = (order, id) => {\n  return {\n    type: actionTypes.ORDER_SUBMIT_SUCCESS,\n    orders: order,\n    id: id\n  };\n};\nexport const trySubmitOrder = () => {\n  return {\n    type: actionTypes.TRY_SUBMIT\n  };\n};\nexport const orderPurchased = () => {\n  return {\n    type: actionTypes.ORDER_PURCHASED\n  };\n};","map":{"version":3,"sources":["/Users/developer/Documents/Projects/Burger-builder/src/Store/actions/order.js"],"names":["actionTypes","axios","checkoutOrder","data","dispatch","trySubmitOrder","post","token","then","response","submitOrderSuccess","name","catch","error","submitOrderFailure","fetchOrders","get","key","push","id","fetchOrdersSubmit","orders","type","FETCH_ORDER","ORDER_SUBMIT_FAILURE","order","ORDER_SUBMIT_SUCCESS","TRY_SUBMIT","orderPurchased","ORDER_PURCHASED"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,OAAO,MAAMC,aAAa,GAAIC,IAAD,IAAU;AACtC,SAAOC,QAAQ,IAAI;AAClBA,IAAAA,QAAQ,CAACC,cAAc,EAAf,CAAR;AACAJ,IAAAA,KAAK,CAACK,IAAN,CAAW,uBAAuBC,KAAlC,EAAyCJ,IAAzC,EAA+CK,IAA/C,CAAoDC,QAAQ,IAAI;AAC/DL,MAAAA,QAAQ,CAACM,kBAAkB,CAACP,IAAD,EAAOM,QAAQ,CAACN,IAAT,CAAcQ,IAArB,CAAnB,CAAR;AACA,KAFD,EAEGC,KAFH,CAESC,KAAK,IAAI;AACjBT,MAAAA,QAAQ,CAACU,kBAAkB,CAACD,KAAD,CAAnB,CAAR;AACA,KAJD;AAKA,GAPD;AAQA,CATM;AAYP,OAAO,MAAME,WAAW,GAAIR,KAAD,IAAW;AACrC,SAAOH,QAAQ,IAAI;AAClBA,IAAAA,QAAQ,CAACC,cAAc,EAAf,CAAR;AACAJ,IAAAA,KAAK,CAACe,GAAN,CAAU,uBAAuBT,KAAjC,EAAwCC,IAAxC,CAA6CC,QAAQ,IAAI;AACxD,UAAIM,WAAW,GAAG,EAAlB;;AACA,WAAI,IAAIE,GAAR,IAAeR,QAAQ,CAACN,IAAxB,EAA6B;AAC5BY,QAAAA,WAAW,CAACG,IAAZ,CAAiB,EAChB,GAAGT,QAAQ,CAACN,IAAT,CAAcc,GAAd,CADa;AAEhBE,UAAAA,EAAE,EAAEF;AAFY,SAAjB;AAIA;;AACDb,MAAAA,QAAQ,CAACgB,iBAAiB,CAACL,WAAD,CAAlB,CAAR;AACA,KATD,EASGH,KATH,CASSC,KAAK,IAAI;AACjBT,MAAAA,QAAQ,CAACU,kBAAkB,CAACD,KAAD,CAAnB,CAAR;AACA,KAXD;AAYA,GAdD;AAeA,CAhBM;AAmBP,OAAO,MAAMO,iBAAiB,GAAIC,MAAD,IAAY;AAC5C,SAAO;AACNC,IAAAA,IAAI,EAAEtB,WAAW,CAACuB,WADZ;AAENF,IAAAA,MAAM,EAAEA;AAFF,GAAP;AAIA,CALM;AAOP,OAAO,MAAMP,kBAAkB,GAAID,KAAD,IAAW;AAC5C,SAAO;AACNS,IAAAA,IAAI,EAAEtB,WAAW,CAACwB,oBADZ;AAENX,IAAAA,KAAK,EAAEA;AAFD,GAAP;AAIA,CALM;AAOP,OAAO,MAAMH,kBAAkB,GAAG,CAACe,KAAD,EAAQN,EAAR,KAAe;AAChD,SAAO;AACNG,IAAAA,IAAI,EAAEtB,WAAW,CAAC0B,oBADZ;AAENL,IAAAA,MAAM,EAAEI,KAFF;AAGNN,IAAAA,EAAE,EAAEA;AAHE,GAAP;AAKA,CANM;AAQP,OAAO,MAAMd,cAAc,GAAG,MAAM;AACnC,SAAO;AACNiB,IAAAA,IAAI,EAAEtB,WAAW,CAAC2B;AADZ,GAAP;AAGA,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAG,MAAM;AACnC,SAAO;AACNN,IAAAA,IAAI,EAAEtB,WAAW,CAAC6B;AADZ,GAAP;AAGA,CAJM","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport axios from '../../axios-order';\n\nexport const checkoutOrder = (data) => {\n\treturn dispatch => {\n\t\tdispatch(trySubmitOrder())\n\t\taxios.post('/orders.json?auth=' + token, data).then(response => {\n\t\t\tdispatch(submitOrderSuccess(data, response.data.name))\n\t\t}).catch(error => {\n\t\t\tdispatch(submitOrderFailure(error))\n\t\t})\n\t}\n}\n\n\nexport const fetchOrders = (token) => {\n\treturn dispatch => {\n\t\tdispatch(trySubmitOrder())\n\t\taxios.get('/orders.json?auth=' + token).then(response => {\n\t\t\tlet fetchOrders = []\n\t\t\tfor(let key in response.data){\n\t\t\t\tfetchOrders.push({\n\t\t\t\t\t...response.data[key],\n\t\t\t\t\tid: key\n\t\t\t\t})\n\t\t\t}\n\t\t\tdispatch(fetchOrdersSubmit(fetchOrders))\n\t\t}).catch(error => {\n\t\t\tdispatch(submitOrderFailure(error))\n\t\t})\n\t}\n}\n\n\nexport const fetchOrdersSubmit = (orders) => {\n\treturn {\n\t\ttype: actionTypes.FETCH_ORDER,\n\t\torders: orders\n\t}\n}\n\nexport const submitOrderFailure = (error) => {\n\treturn {\n\t\ttype: actionTypes.ORDER_SUBMIT_FAILURE,\n\t\terror: error\n\t}\n}\n\nexport const submitOrderSuccess = (order, id) => {\n\treturn {\n\t\ttype: actionTypes.ORDER_SUBMIT_SUCCESS,\n\t\torders: order,\n\t\tid: id\n\t}\n}\n\nexport const trySubmitOrder = () => {\n\treturn {\n\t\ttype: actionTypes.TRY_SUBMIT\n\t}\n}\n\nexport const orderPurchased = () => {\n\treturn {\n\t\ttype: actionTypes.ORDER_PURCHASED\n\t}\n}"]},"metadata":{},"sourceType":"module"}