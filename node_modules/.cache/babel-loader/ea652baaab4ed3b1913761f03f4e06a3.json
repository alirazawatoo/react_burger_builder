{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport axios from 'axios';\nexport const formSubmitHandler = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4';\n\n    if (!isSignUp) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4';\n    }\n\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(authEnd(null));\n      dispatch(authLogout(response.data.expiresIn));\n    }).catch(error => {\n      console.log(error);\n      dispatch(authEnd(error));\n    });\n  };\n};\n\nconst logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nexport const logoutUser = () => {\n  return dispatch => {\n    dispatch(logout());\n  };\n};\n\nconst authLogout = expire => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expire * 1000);\n  };\n};\n\nconst authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nconst authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\n\nconst authEnd = error => {\n  return {\n    type: actionTypes.AUTH_END,\n    error: error\n  };\n};","map":{"version":3,"sources":["/Users/developer/Documents/Projects/Burger-builder/src/Store/actions/auth.js"],"names":["actionTypes","axios","formSubmitHandler","email","password","isSignUp","dispatch","authStart","authData","returnSecureToken","url","post","then","response","console","log","authSuccess","data","idToken","localId","authEnd","authLogout","expiresIn","catch","error","logout","type","AUTH_LOGOUT","logoutUser","expire","setTimeout","AUTH_START","token","userId","AUTH_SUCCESS","AUTH_END"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,KAA+B;AAC/D,SAAOC,QAAQ,IAAI;AAClBA,IAAAA,QAAQ,CAACC,SAAS,EAAV,CAAR;AACA,UAAMC,QAAQ,GAAG;AAChBL,MAAAA,KAAK,EAAEA,KADS;AAEhBC,MAAAA,QAAQ,EAAEA,QAFM;AAGhBK,MAAAA,iBAAiB,EAAE;AAHH,KAAjB;AAKA,QAAIC,GAAG,GAAG,uGAAV;;AACA,QAAG,CAACL,QAAJ,EAAa;AACZK,MAAAA,GAAG,GAAG,mHAAN;AACA;;AACDT,IAAAA,KAAK,CAACU,IAAN,CAAWD,GAAX,EAAgBF,QAAhB,EACCI,IADD,CACMC,QAAQ,IAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAP,MAAAA,QAAQ,CAACU,WAAW,CAACH,QAAQ,CAACI,IAAT,CAAcC,OAAf,EAAwBL,QAAQ,CAACI,IAAT,CAAcE,OAAtC,CAAZ,CAAR;AACAb,MAAAA,QAAQ,CAACc,OAAO,CAAC,IAAD,CAAR,CAAR;AACAd,MAAAA,QAAQ,CAACe,UAAU,CAACR,QAAQ,CAACI,IAAT,CAAcK,SAAf,CAAX,CAAR;AACA,KAND,EAMGC,KANH,CAMSC,KAAK,IAAI;AACjBV,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACAlB,MAAAA,QAAQ,CAACc,OAAO,CAACI,KAAD,CAAR,CAAR;AACA,KATD;AAUA,GArBD;AAsBA,CAvBM;;AAyBP,MAAMC,MAAM,GAAI,MAAM;AACrB,SAAO;AACNC,IAAAA,IAAI,EAAE1B,WAAW,CAAC2B;AADZ,GAAP;AAGA,CAJD;;AAMA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC/B,SAAOtB,QAAQ,IAAI;AAClBA,IAAAA,QAAQ,CAACmB,MAAM,EAAP,CAAR;AACA,GAFD;AAGA,CAJM;;AAMP,MAAMJ,UAAU,GAAIQ,MAAD,IAAY;AAC9B,SAAOvB,QAAQ,IAAI;AAClBwB,IAAAA,UAAU,CAAC,MAAM;AAChBxB,MAAAA,QAAQ,CAACmB,MAAM,EAAP,CAAR;AACA,KAFS,EAEPI,MAAM,GAAG,IAFF,CAAV;AAGA,GAJD;AAKA,CAND;;AAQA,MAAMtB,SAAS,GAAG,MAAM;AACvB,SAAO;AACNmB,IAAAA,IAAI,EAAE1B,WAAW,CAAC+B;AADZ,GAAP;AAGA,CAJD;;AAMA,MAAMf,WAAW,GAAG,CAACgB,KAAD,EAAQC,MAAR,KAAmB;AACtC,SAAO;AACNP,IAAAA,IAAI,EAAE1B,WAAW,CAACkC,YADZ;AAENF,IAAAA,KAAK,EAAEA,KAFD;AAGNC,IAAAA,MAAM,EAAEA;AAHF,GAAP;AAKA,CAND;;AASA,MAAMb,OAAO,GAAII,KAAD,IAAW;AAC1B,SAAO;AACNE,IAAAA,IAAI,EAAE1B,WAAW,CAACmC,QADZ;AAENX,IAAAA,KAAK,EAAEA;AAFD,GAAP;AAIA,CALD","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport axios from 'axios';\n\n\nexport const formSubmitHandler = (email, password, isSignUp) => {\n\treturn dispatch => {\n\t\tdispatch(authStart())\n\t\tconst authData = {\n\t\t\temail: email,\n\t\t\tpassword: password,\n\t\t\treturnSecureToken: true\n\t\t}\n\t\tlet url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4'\n\t\tif(!isSignUp){\n\t\t\turl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4'\n\t\t}\n\t\taxios.post(url, authData)\n\t\t.then(response => {\n\t\t\tconsole.log(response)\n\t\t\tdispatch(authSuccess(response.data.idToken, response.data.localId))\n\t\t\tdispatch(authEnd(null))\n\t\t\tdispatch(authLogout(response.data.expiresIn))\n\t\t}).catch(error => {\n\t\t\tconsole.log(error)\n\t\t\tdispatch(authEnd(error))\n\t\t})\n\t}\n} \n\nconst logout =  () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\nexport const logoutUser = () => {\n\treturn dispatch => {\n\t\tdispatch(logout())\n\t}\n}\n\nconst authLogout = (expire) => {\n\treturn dispatch => {\n\t\tsetTimeout(() => {\n\t\t\tdispatch(logout())\n\t\t}, expire * 1000 );\n\t}\n}\n\nconst authStart = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\nconst authSuccess = (token, userId) => {\n\treturn {\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\ttoken: token,\n\t\tuserId: userId\n\t}\n}\n\n\nconst authEnd = (error) => {\n\treturn {\n\t\ttype: actionTypes.AUTH_END,\n\t\terror: error\n\t}\n}"]},"metadata":{},"sourceType":"module"}