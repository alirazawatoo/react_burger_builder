{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { uilityContent } from '../utility';\nconst intialState = {\n  orders: [],\n  loading: false,\n  purchased: false\n};\n\nconst trySubmitOrder = (state, action) => {\n  return uilityContent(state, {\n    loading: true\n  });\n};\n\nconst orderSubmitSuccess = (state, action) => {\n  let newOrder = { ...action.orders,\n    id: action.id\n  };\n  console.log(newOrder);\n  console.log(state.orders);\n  let orders = [...state.orders, newOrder];\n  console.log(orders);\n  return uilityContent(state, {\n    orders: orders,\n    loading: false,\n    purchased: true\n  });\n};\n\nconst orderSubmitFailure = (state, action) => {\n  return uilityContent(state, {\n    loading: false\n  });\n};\n\nconst orderPurchased = (state, action) => {\n  return uilityContent(state, {\n    purchased: false\n  });\n};\n\nconst fetcOrder = (state, action) => {\n  return uilityContent(state, {\n    orders: action.orders\n  });\n};\n\nconst orderReducer = (state = intialState, action) => {\n  switch (action.type) {\n    case actionTypes.ORDER_PURCHASED:\n      return orderPurchased(state, action);\n\n    case actionTypes.TRY_SUBMIT:\n      return trySubmitOrder(state, action);\n\n    case actionTypes.ORDER_SUBMIT_SUCCESS:\n      return orderSubmitSuccess(state, action);\n\n    case actionTypes.ORDER_SUBMIT_FAILURE:\n      return orderSubmitFailure(state, action);\n\n    case actionTypes.FETCH_ORDER:\n      return;\n\n    default:\n      return state;\n  }\n};\n\nexport default orderReducer;","map":{"version":3,"sources":["/Users/developer/Documents/Projects/Burger-builder/src/Store/reducer/order.js"],"names":["actionTypes","uilityContent","intialState","orders","loading","purchased","trySubmitOrder","state","action","orderSubmitSuccess","newOrder","id","console","log","orderSubmitFailure","orderPurchased","fetcOrder","orderReducer","type","ORDER_PURCHASED","TRY_SUBMIT","ORDER_SUBMIT_SUCCESS","ORDER_SUBMIT_FAILURE","FETCH_ORDER"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,MAAMC,WAAW,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,SAAS,EAAE;AAHQ,CAApB;;AAMA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,SAAOP,aAAa,CAAEM,KAAF,EAAS;AAAEH,IAAAA,OAAO,EAAE;AAAX,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMK,kBAAkB,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC7C,MAAIE,QAAQ,GAAG,EAAE,GAAGF,MAAM,CAACL,MAAZ;AAAoBQ,IAAAA,EAAE,EAAEH,MAAM,CAACG;AAA/B,GAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACJ,MAAlB;AACA,MAAIA,MAAM,GAAG,CAAC,GAAGI,KAAK,CAACJ,MAAV,EAAkBO,QAAlB,CAAb;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACA,SAAOF,aAAa,CAAEM,KAAF,EAAS;AAAEJ,IAAAA,MAAM,EAAEA,MAAV;AAAmBC,IAAAA,OAAO,EAAE,KAA5B;AAAoCC,IAAAA,SAAS,EAAE;AAA/C,GAAT,CAApB;AACA,CAPD;;AASA,MAAMS,kBAAkB,GAAG,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOP,aAAa,CAAEM,KAAF,EAAS;AAAEH,IAAAA,OAAO,EAAE;AAAX,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMW,cAAc,GAAG,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACzC,SAAOP,aAAa,CAAEM,KAAF,EAAS;AAAEF,IAAAA,SAAS,EAAE;AAAb,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMW,SAAS,GAAG,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACpC,SAAOP,aAAa,CAACM,KAAD,EAAQ;AAACJ,IAAAA,MAAM,EAAEK,MAAM,CAACL;AAAhB,GAAR,CAApB;AACA,CAFD;;AAIA,MAAMc,YAAY,GAAG,CAACV,KAAK,GAAGL,WAAT,EAAsBM,MAAtB,KAAiC;AACrD,UAAOA,MAAM,CAACU,IAAd;AACC,SAAKlB,WAAW,CAACmB,eAAjB;AACC,aAAOJ,cAAc,CAACR,KAAD,EAAQC,MAAR,CAArB;;AACD,SAAKR,WAAW,CAACoB,UAAjB;AACC,aAAOd,cAAc,CAACC,KAAD,EAAQC,MAAR,CAArB;;AACD,SAAKR,WAAW,CAACqB,oBAAjB;AACC,aAAOZ,kBAAkB,CAACF,KAAD,EAAQC,MAAR,CAAzB;;AACD,SAAKR,WAAW,CAACsB,oBAAjB;AACC,aAAOR,kBAAkB,CAACP,KAAD,EAAQC,MAAR,CAAzB;;AACD,SAAKR,WAAW,CAACuB,WAAjB;AACC;;AACD;AACC,aAAOhB,KAAP;AAZF;AAcA,CAfD;;AAiBA,eAAeU,YAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { uilityContent } from '../utility';\n\nconst intialState = {\n\torders: [],\n\tloading: false,\n\tpurchased: false\n}\n\nconst trySubmitOrder = (state, action) => {\n\treturn uilityContent( state, { loading: true } )\n}\n\nconst orderSubmitSuccess = (state, action) => {\n\tlet newOrder = { ...action.orders, id: action.id }\n\tconsole.log(newOrder);\n\tconsole.log(state.orders);\n\tlet orders = [...state.orders, newOrder]\n\tconsole.log(orders)\n\treturn uilityContent( state, { orders: orders , loading: false , purchased: true } )\n}\n\nconst orderSubmitFailure = (state, action) => {\n\treturn uilityContent( state, { loading: false } )\n}\n\nconst orderPurchased = (state, action) => {\n\treturn uilityContent( state, { purchased: false } )\n}\n\nconst fetcOrder = (state, action) => {\n\treturn uilityContent(state, {orders: action.orders})\n}\n\nconst orderReducer = (state = intialState, action) => {\n\tswitch(action.type) {\n\t\tcase actionTypes.ORDER_PURCHASED:\n\t\t\treturn orderPurchased(state, action)\n\t\tcase actionTypes.TRY_SUBMIT:\n\t\t\treturn trySubmitOrder(state, action)\n\t\tcase actionTypes.ORDER_SUBMIT_SUCCESS:\n\t\t\treturn orderSubmitSuccess(state, action)\n\t\tcase actionTypes.ORDER_SUBMIT_FAILURE:\n\t\t\treturn orderSubmitFailure(state, action)\n\t\tcase actionTypes.FETCH_ORDER:\n\t\t\treturn \n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default orderReducer;"]},"metadata":{},"sourceType":"module"}