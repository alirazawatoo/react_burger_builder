{"ast":null,"code":"import * as actionTypes from '../actions';\nconst intialState = {\n  ingredients: {},\n  totalPrice: 4,\n  purchaseable: false,\n  ordering: false,\n  loading: false\n};\nconst INGREDIENTS_PRICES = {\n  salad: 0.5,\n  cheese: 0.5,\n  bacon: 0.2,\n  meat: 2\n};\n\nconst reducer = (state = intialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_INGREDIENTS:\n      return { ...state,\n        ingredients: action.ingredients\n      };\n\n    case actionTypes.INC_INGREDIENTS:\n      let ingredientCount = state.ingredients[action.ingredientName];\n      let ingredients = { ...state.ingredients\n      };\n      ingredients[action.ingredientName] = ingredientCount + 1;\n      let burgerPrice = INGREDIENTS_PRICES[action.ingredientName] + state.totalPrice;\n      return { ...state,\n        purchaseable: true,\n        totalPrice: burgerPrice,\n        ingredients: ingredients\n      };\n\n    case actionTypes.DEC_INGREDIENTS:\n      let count = state.ingredients[action.ingredientName];\n      console.log(count);\n      let totalIngredients = { ...state.ingredients\n      };\n      totalIngredients[action.ingredientName] = count - 1;\n      let price = state.totalPrice - INGREDIENTS_PRICES[action.ingredientName];\n\n      for (let key in totalIngredients) {\n        ingredientsSum += totalIngredients[key];\n      }\n\n      return { ...state,\n        totalPrice: price,\n        ingredients: totalIngredients,\n        purchaseable: ingredientsSum > 0\n      };\n      console.log(count);\n\n      if (totalIngredients[action.ingredientName] > 0) {\n        return { ...state,\n          totalPrice: price,\n          ingredients: totalIngredients\n        };\n      } else {\n        let ingredientsSum = 0;\n\n        for (let key in totalIngredients) {\n          ingredientsSum += totalIngredients[key];\n        }\n\n        console.log(ingredientsSum);\n        return { ...state\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/developer/Documents/Projects/Burger-builder/src/Store/reducer/ingredients.js"],"names":["actionTypes","intialState","ingredients","totalPrice","purchaseable","ordering","loading","INGREDIENTS_PRICES","salad","cheese","bacon","meat","reducer","state","action","type","SET_INGREDIENTS","INC_INGREDIENTS","ingredientCount","ingredientName","burgerPrice","DEC_INGREDIENTS","count","console","log","totalIngredients","price","key","ingredientsSum"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B;AAEA,MAAMC,WAAW,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,UAAU,EAAE,CAFO;AAGnBC,EAAAA,YAAY,EAAE,KAHK;AAInBC,EAAAA,QAAQ,EAAE,KAJS;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAApB;AAQA,MAAMC,kBAAkB,GAAG;AAC1BC,EAAAA,KAAK,EAAE,GADmB;AAE1BC,EAAAA,MAAM,EAAE,GAFkB;AAG1BC,EAAAA,KAAK,EAAE,GAHmB;AAI1BC,EAAAA,IAAI,EAAE;AAJoB,CAA3B;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGZ,WAAT,EAAsBa,MAAtB,KAAiC;AAChD,UAAOA,MAAM,CAACC,IAAd;AACC,SAAMf,WAAW,CAACgB,eAAlB;AACC,aAAO,EACN,GAAGH,KADG;AAENX,QAAAA,WAAW,EAAEY,MAAM,CAACZ;AAFd,OAAP;;AAID,SAAMF,WAAW,CAACiB,eAAlB;AACC,UAAIC,eAAe,GAAGL,KAAK,CAACX,WAAN,CAAkBY,MAAM,CAACK,cAAzB,CAAtB;AACA,UAAIjB,WAAW,GAAG,EAAC,GAAGW,KAAK,CAACX;AAAV,OAAlB;AACAA,MAAAA,WAAW,CAACY,MAAM,CAACK,cAAR,CAAX,GAAqCD,eAAe,GAAG,CAAvD;AACA,UAAIE,WAAW,GAAGb,kBAAkB,CAACO,MAAM,CAACK,cAAR,CAAlB,GAA4CN,KAAK,CAACV,UAApE;AACA,aAAO,EACN,GAAGU,KADG;AAENT,QAAAA,YAAY,EAAE,IAFR;AAGND,QAAAA,UAAU,EAAEiB,WAHN;AAINlB,QAAAA,WAAW,EAAEA;AAJP,OAAP;;AAMD,SAAMF,WAAW,CAACqB,eAAlB;AACC,UAAIC,KAAK,GAAGT,KAAK,CAACX,WAAN,CAAkBY,MAAM,CAACK,cAAzB,CAAZ;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAIG,gBAAgB,GAAG,EAAC,GAAGZ,KAAK,CAACX;AAAV,OAAvB;AACAuB,MAAAA,gBAAgB,CAACX,MAAM,CAACK,cAAR,CAAhB,GAA0CG,KAAK,GAAG,CAAlD;AACA,UAAII,KAAK,GAAGb,KAAK,CAACV,UAAN,GAAmBI,kBAAkB,CAACO,MAAM,CAACK,cAAR,CAAjD;;AAGA,WAAK,IAAIQ,GAAT,IAAgBF,gBAAhB,EAAkC;AACjCG,QAAAA,cAAc,IAAIH,gBAAgB,CAACE,GAAD,CAAlC;AACA;;AACD,aAAO,EACN,GAAGd,KADG;AAENV,QAAAA,UAAU,EAAEuB,KAFN;AAGNxB,QAAAA,WAAW,EAAEuB,gBAHP;AAINrB,QAAAA,YAAY,EAAEwB,cAAc,GAAG;AAJzB,OAAP;AAOAL,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,UAAIG,gBAAgB,CAACX,MAAM,CAACK,cAAR,CAAhB,GAA0C,CAA9C,EAAiD;AAChD,eAAO,EACN,GAAGN,KADG;AAENV,UAAAA,UAAU,EAAEuB,KAFN;AAGNxB,UAAAA,WAAW,EAAEuB;AAHP,SAAP;AAKA,OAND,MAOK;AACJ,YAAIG,cAAc,GAAG,CAArB;;AACA,aAAK,IAAID,GAAT,IAAgBF,gBAAhB,EAAkC;AACjCG,UAAAA,cAAc,IAAIH,gBAAgB,CAACE,GAAD,CAAlC;AACA;;AACDJ,QAAAA,OAAO,CAACC,GAAR,CAAYI,cAAZ;AACA,eAAM,EACL,GAAGf;AADE,SAAN;AAGA;;AACF;AACC,aAAOA,KAAP;AAtDF;AAwDA,CAzDD;;AA2DA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions'\n\nconst intialState = {\n\tingredients: {},\n\ttotalPrice: 4,\n\tpurchaseable: false,\n\tordering: false,\n\tloading: false\n}\n\nconst INGREDIENTS_PRICES = {\n\tsalad: 0.5,\n\tcheese: 0.5,\n\tbacon: 0.2,\n\tmeat: 2\n}\n\nconst reducer = (state = intialState, action) => {\n\tswitch(action.type) {\n\t\tcase (actionTypes.SET_INGREDIENTS):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tingredients: action.ingredients\n\t\t\t}\n\t\tcase (actionTypes.INC_INGREDIENTS):\n\t\t\tlet ingredientCount = state.ingredients[action.ingredientName]\n\t\t\tlet ingredients = {...state.ingredients};\n\t\t\tingredients[action.ingredientName] = ingredientCount + 1;\n\t\t\tlet burgerPrice = INGREDIENTS_PRICES[action.ingredientName] + state.totalPrice;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpurchaseable: true,\n\t\t\t\ttotalPrice: burgerPrice,\n\t\t\t\tingredients: ingredients\n\t\t\t}\n\t\tcase (actionTypes.DEC_INGREDIENTS):\n\t\t\tlet count = state.ingredients[action.ingredientName]\n\t\t\tconsole.log(count)\n\t\t\tlet totalIngredients = {...state.ingredients};\n\t\t\ttotalIngredients[action.ingredientName] = count - 1;\n\t\t\tlet price = state.totalPrice - INGREDIENTS_PRICES[action.ingredientName];\n\n\n\t\t\tfor (let key in totalIngredients) {\n\t\t\t\tingredientsSum += totalIngredients[key]\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttotalPrice: price,\n\t\t\t\tingredients: totalIngredients,\n\t\t\t\tpurchaseable: ingredientsSum > 0\n\t\t\t}\n\n\t\t\tconsole.log(count)\n\t\t\tif (totalIngredients[action.ingredientName] > 0) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\ttotalPrice: price,\n\t\t\t\t\tingredients: totalIngredients\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet ingredientsSum = 0;\n\t\t\t\tfor (let key in totalIngredients) {\n\t\t\t\t\tingredientsSum += totalIngredients[key]\n\t\t\t\t}\n\t\t\t\tconsole.log(ingredientsSum);\n\t\t\t\treturn{\n\t\t\t\t\t...state,\n\t\t\t\t}\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}