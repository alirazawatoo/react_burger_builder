{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport axios from 'axios';\nexport const formSubmitHandler = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4';\n\n    if (!isSignUp) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4';\n    }\n\n    axios.post(url, authData).then(response => {\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(authEnd(null));\n      dispatch(authLogout(response.data.expiresIn));\n      setLocalStorage(response.data.idToken, response.data.expiresIn, response.data.localId);\n    }).catch(error => {\n      console.log(error);\n      dispatch(authEnd(error));\n    });\n  };\n};\n\nconst setLocalStorage = (token, expirationTime, userId) => {\n  localStorage.setItem('Token', token);\n  localStorage.setItem('ExpirationTime', expirationTime);\n  localStorage.setItem('UserId', userId);\n};\n\nconst removeLocalStorage = () => {\n  localStorage.removeItem('Token');\n  localStorage.removeItem('ExpirationTime');\n  localStorage.removeItem('UserId');\n};\n\nconst logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nexport const logoutUser = () => {\n  removeLocalStorage();\n  return dispatch => {\n    dispatch(logout());\n  };\n};\n\nconst authLogout = expire => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expire * 1000);\n  };\n};\n\nconst authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nconst authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\n\nconst authEnd = error => {\n  return {\n    type: actionTypes.AUTH_END,\n    error: error\n  };\n};","map":{"version":3,"sources":["/Users/developer/Documents/Projects/Burger-builder/src/Store/actions/auth.js"],"names":["actionTypes","axios","formSubmitHandler","email","password","isSignUp","dispatch","authStart","authData","returnSecureToken","url","post","then","response","authSuccess","data","idToken","localId","authEnd","authLogout","expiresIn","setLocalStorage","catch","error","console","log","token","expirationTime","userId","localStorage","setItem","removeLocalStorage","removeItem","logout","type","AUTH_LOGOUT","logoutUser","expire","setTimeout","AUTH_START","AUTH_SUCCESS","AUTH_END"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport axios from 'axios';\n\n\nexport const formSubmitHandler = (email, password, isSignUp) => {\n\treturn dispatch => {\n\t\tdispatch(authStart())\n\t\tconst authData = {\n\t\t\temail: email,\n\t\t\tpassword: password,\n\t\t\treturnSecureToken: true\n\t\t}\n\t\tlet url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4'\n\t\tif(!isSignUp){\n\t\t\turl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAyoU9vWd9oZJiKWFZ6qFBI5hKzfGHTy-4'\n\t\t}\n\t\taxios.post(url, authData)\n\t\t.then(response => {\n\t\t\tdispatch(authSuccess(response.data.idToken, response.data.localId))\n\t\t\tdispatch(authEnd(null))\n\t\t\tdispatch(authLogout(response.data.expiresIn))\n\t\t\tsetLocalStorage(response.data.idToken, response.data.expiresIn, response.data.localId)\n\t\t}).catch(error => {\n\t\t\tconsole.log(error)\n\t\t\tdispatch(authEnd(error))\n\t\t})\n\t}\n} \n\nconst setLocalStorage = (token, expirationTime, userId) => {\n\tlocalStorage.setItem('Token', token)\n\tlocalStorage.setItem('ExpirationTime', expirationTime)\n\tlocalStorage.setItem('UserId', userId)\n}\n\n\nconst removeLocalStorage = () => {\n\tlocalStorage.removeItem('Token')\n\tlocalStorage.removeItem('ExpirationTime')\n\tlocalStorage.removeItem('UserId')\n}\n\nconst logout =  () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\nexport const logoutUser = () => {\n\tremoveLocalStorage()\n\treturn dispatch => {\n\t\tdispatch(logout())\n\t}\n}\n\nconst authLogout = (expire) => {\n\treturn dispatch => {\n\t\tsetTimeout(() => {\n\t\t\tdispatch(logout())\n\t\t}, expire * 1000 );\n\t}\n}\n\nconst authStart = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\nconst authSuccess = (token, userId) => {\n\treturn {\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\ttoken: token,\n\t\tuserId: userId\n\t}\n}\n\n\nconst authEnd = (error) => {\n\treturn {\n\t\ttype: actionTypes.AUTH_END,\n\t\terror: error\n\t}\n}"]},"metadata":{},"sourceType":"module"}