{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { uilityContent } from '../utility';\nconst intialState = {\n  loading: false\n};\n\nconst trySubmitOrder = (state, action) => {\n  return uilityContent(state, {\n    loading: true\n  });\n};\n\nconst orderSubmitSuccess = (state, action) => {\n  let newOrder = { ...action.orders,\n    id: action.id\n  };\n  console.log(newOrder);\n  console.log(state.orders);\n  let orders = [...state.orders, newOrder];\n  console.log(orders);\n  return uilityContent(state, {\n    orders: orders,\n    loading: false,\n    purchased: true\n  });\n};\n\nconst orderSubmitFailure = (state, action) => {\n  return uilityContent(state, {\n    loading: false\n  });\n};\n\nconst orderPurchased = (state, action) => {\n  return uilityContent(state, {\n    purchased: false\n  });\n};\n\nconst authReducer = (state = intialState, action) => {\n  switch (action.type) {\n    case actionTypes.TRY_SUBMIT:\n      return trySubmitOrder(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;","map":{"version":3,"sources":["/Users/developer/Documents/Projects/Burger-builder/src/Store/reducer/auth.js"],"names":["actionTypes","uilityContent","intialState","loading","trySubmitOrder","state","action","orderSubmitSuccess","newOrder","orders","id","console","log","purchased","orderSubmitFailure","orderPurchased","authReducer","type","TRY_SUBMIT"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,MAAMC,WAAW,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAApB;;AAIA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,SAAOL,aAAa,CAAEI,KAAF,EAAS;AAAEF,IAAAA,OAAO,EAAE;AAAX,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMI,kBAAkB,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC7C,MAAIE,QAAQ,GAAG,EAAE,GAAGF,MAAM,CAACG,MAAZ;AAAoBC,IAAAA,EAAE,EAAEJ,MAAM,CAACI;AAA/B,GAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACI,MAAlB;AACA,MAAIA,MAAM,GAAG,CAAC,GAAGJ,KAAK,CAACI,MAAV,EAAkBD,QAAlB,CAAb;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,SAAOR,aAAa,CAAEI,KAAF,EAAS;AAAEI,IAAAA,MAAM,EAAEA,MAAV;AAAmBN,IAAAA,OAAO,EAAE,KAA5B;AAAoCU,IAAAA,SAAS,EAAE;AAA/C,GAAT,CAApB;AACA,CAPD;;AASA,MAAMC,kBAAkB,GAAG,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOL,aAAa,CAAEI,KAAF,EAAS;AAAEF,IAAAA,OAAO,EAAE;AAAX,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMY,cAAc,GAAG,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACzC,SAAOL,aAAa,CAAEI,KAAF,EAAS;AAAEQ,IAAAA,SAAS,EAAE;AAAb,GAAT,CAApB;AACA,CAFD;;AAIA,MAAMG,WAAW,GAAG,CAACX,KAAK,GAAGH,WAAT,EAAsBI,MAAtB,KAAiC;AACpD,UAAOA,MAAM,CAACW,IAAd;AACC,SAAKjB,WAAW,CAACkB,UAAjB;AACC,aAAOd,cAAc,CAACC,KAAD,EAAQC,MAAR,CAArB;;AACD;AACC,aAAOD,KAAP;AAJF;AAMA,CAPD;;AASA,eAAeW,WAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { uilityContent } from '../utility';\n\nconst intialState = {\n\tloading: false,\n}\n\nconst trySubmitOrder = (state, action) => {\n\treturn uilityContent( state, { loading: true } )\n}\n\nconst orderSubmitSuccess = (state, action) => {\n\tlet newOrder = { ...action.orders, id: action.id }\n\tconsole.log(newOrder);\n\tconsole.log(state.orders);\n\tlet orders = [...state.orders, newOrder]\n\tconsole.log(orders)\n\treturn uilityContent( state, { orders: orders , loading: false , purchased: true } )\n}\n\nconst orderSubmitFailure = (state, action) => {\n\treturn uilityContent( state, { loading: false } )\n}\n\nconst orderPurchased = (state, action) => {\n\treturn uilityContent( state, { purchased: false } )\n}\n\nconst authReducer = (state = intialState, action) => {\n\tswitch(action.type) {\n\t\tcase actionTypes.TRY_SUBMIT:\n\t\t\treturn trySubmitOrder(state, action)\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}